<?php

/**
 * @file
 * Primary module hooks for custom elearning module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function custom_elearning_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.custom_elearning':

      return '<p>' . t('A custom module E-learning drupal project.') . '</p>';

    default:
  }
}

/**
 * Implements hook_views_query_alter().
 */
function custom_elearning_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'my_learning') {
    $currentUid = \Drupal::currentUser()->id();
    $commonService = \Drupal::service('custom_elearning.common_service');
    // Get student enrolled courses.
    $result = $commonService->getEnrolledCourses($currentUid);
    // Use an empty array if $result is empty.
    $result = empty($result) ? [0] : $result;
    // Add a condition to the query to include only the enrolled course IDs.
    $query->addWhere('AND', 'node_field_data.nid', $result, 'IN');
  }
}

/**
 * Implements hook_views_data().
 */
function custom_elearning_views_data() {
  $data['views']['table']['group'] = t('Custom Global');
  $data['views']['table']['join'] = [
    // #global is a special flag which allows a table to appear all the time.
    '#global' => [],
  ];

  $data['views']['course_progress'] = [
    'title' => t('Course Progress'),
    'help' => t('Show overall course progress.'),
    'field' => [
      'id' => 'course_progress',
    ],
  ];

  // Create custom group for custom table.
  $data['custom_enrollment_course_enrollment_table']['table']['group'] = t('Custom Enrollment');
  $data['custom_enrollment_course_enrollment_table']['table']['base'] = [
    'field' => 'id',
    'title' => t('Custom Enrollment Course Enrollment Table'),
    'help' => t('Custom table for storing course enrollment data.'),
  ];
  // Join table.
  $data['custom_enrollment_course_enrollment_table']['table']['join'] = [
    'node' => [
      'left_field' => 'nid',
      'field' => 'course_id',
    ],
  ];
  // course id.
  $data['custom_enrollment_course_enrollment_table']['course'] = [
    'title' => t('Course'),
    'help' => t('The course associated with the enrollment.'),
    'relationship' => [
      'base' => 'node_field_data',
      'base field' => 'nid',
      'relationship field' => 'course_id',
      'id' => 'standard',
      'label' => t('Course'),
      'title' => t('Course'),
    ],
  ];
  // user id field.
  $data['custom_enrollment_course_enrollment_table']['user_id'] = [
    'title' => t('User ID'),
    'help' => t('The user ID associated with the enrollment.'),
    'field' => [
      'id' => 'standard',
      'click sortable' => TRUE,
    ],
    'filter' => [
      'id' => 'numeric',
    ],
    'argument' => [
      'id' => 'numeric',
    ],
    'relationship' => [
      'base' => 'users_field_data',
      'base field' => 'uid',
      'id' => 'standard',
      'label' => t('User'),
    ],
  ];
  // course status field.
  $data['custom_enrollment_course_enrollment_table']['course_status'] = [
    'title' => t('Course Status'),
    'help' => t('The status of the course enrollment (0: Enrolled, 1: On-going, 2: Completed).'),
    'field' => [
      'id' => 'numeric',
      'click sortable' => TRUE,
    ],
    'filter' => [
      'id' => 'numeric',
    ],
    'argument' => [
      'id' => 'numeric',
    ],
  ];

  return $data;
}

/**
 * Implements hook_theme().
 */
function custom_elearning_theme($existing, $type, $theme, $path) {
  return [
    'certificate_generate' => [
      'variables' => [
        'user_name' => NULL,
        'course_title' => NULL,
        'date' => NULL,
      ],
    ],
    'instructor_dashboard' => [
      'variables' => [
        'data' => NULL,
      ],
    ],
  ];
}
